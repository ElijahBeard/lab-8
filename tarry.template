// makes an object with a dynamic array of size 5
template<class T>
Tarray<T>::Tarray(){
    used = 0;
    capacity = 5;
    data = new T[capacity];
    current_index = 0;
}
// puts the item into the next available spot in the 
// array. If the array is full, resize is called.
template<class T>
void Tarray<T>::add(T item){
    if(used == capacity){resize();}
    data[used] = item;
    used = used + 1;
}

// iterator functions
// places current_index at the beginning of the array
template<class T>
void Tarray<T>::start(){
    current_index = 0;
}

// returns true if the current index is less than used
template<class T>
bool Tarray<T>::is_item()const{
    return (current_index < used);
}

// moves current index to the next array location
template<class T>
void Tarray<T>::advance(){
    current_index = current_index + 1;
}

// returns the array item referenced by current index
template<class T>
T Tarray<T>::current()const{
    return(data[current_index]);
}

// removes the item at the current index
template<class T>
void Tarray<T>::remove_current(){
    for(int i = 0; i < used; i++){
        if(data[i] == data[current_index]){
            data[i] = data[current_index + 1];
            current_index = current_index + 1;
        }
    }
}
template<class T>
void Tarray<T>::resize(){
    T* temp;
    temp = new T[capacity + 5];
    for(int i = 0; i < used; i++){
        temp[i] = data [i]; 
    }
    delete []data;
    data = temp;
    capacity = capacity + 5;
}